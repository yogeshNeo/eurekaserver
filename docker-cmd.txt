#docker
sudo apt install apt-transport-https ca-certificates curl software-properties-common
curl -fssl https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
apt-cache policy docker-ce
sudo apt install docker-ce
sudo systemctl status docker


docker
docker docker-subcommand --help
docker info

docker run hello-world

docker run -it ubuntu bash (optional)

docker pull ubuntu
docker images

docker run -it ubuntu
root@561b362aa24c

apt install nodejs
node -v
v12.22.9

exit

docker ps
docker ps -a
docker ps -l

docker start 561b362aa24c
docker ps -a

docker stop dazzling_taussig
docker ps -a
docker rm exciting_johnson
docker ps -a


sudo apt-get install ./docker-desktop-4.22.1-amd64.deb (optional)

touch dockerfile
 (in web service)
docker build -t config-server .


./gradlew clean bootjar
config-server-0.0.1-snapshot.jar


jar cvf config-server-app-1.0.jar src/main/java/com/configserver/configserverapplication.java

from openjdk:17-alpine3.14
workdir /application
copy build/libs/config-server-app-1.0.jar ./

cmd ["java", "-jar", "config-servers-app-1.0.jar"]
copy cmd ["jar","cvf","config-server-app-1.0.jar","src/main/java/com/configserver/configserverapplication.java"] ./


from openjdk:17-alpine3.14
arg jar_file="/build/libs/*.jar"
arg profile="dev"
copy ${jar_file} app.jar
entrypoint ["java","-xms1024m","-xmx4096m","-jar","-dspring.profiles.active=${profile}","/app.jar"]

docker image ls

docker run -dp 127.0.0.1:3000:3000 config-server


java -xms1024m -xmx4096m -jar -dspring.profiles.active=dev config-server-0.0.1-snapshot.jar



docker build -t config-server .

docker run -dp 127.0.0.1:3000:3000 config-server

docker tag config-server:latest config-server:latest

sudo docker push config-server:latest

docker run -p 127.0.0.1:8085 config-server:latest .

---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------

from openjdk:17-alpine3.14
volume /tmp
expose 8085
arg jar_file="/build/libs/*.jar"
add ${jar_file} app.jar
entrypoint ["java","-xms1024m","-xmx4096m","-jar","-dspring.profiles.active=dev","/app.jar"]

sudo docker build -t config-server .
sudo docker ps -a 
sudo docker image ls
sudo docker run -p 8085:8085 config-server:latest .

fuser -k 8761/tcp

sudo docker build -t eureka-server .
docker build -t eureka .
sudo docker run -p 8761:8761 eureka-server:latest .
docker run -p 8761:8761 yogeshch/eureka:latest .

touch dockerfile

sudo docker build -t api-gateway .
sudo docker run -p 9090:9090 eureka-server:latest .

./gradlew clean bootjar

sudo docker build -t order .
sudo docker run -p 8080:8080 order:latest .
---------------------------------------------------------------------------------------------------------

redis installation
fuser -k 6379/tcp

sudo docker network create redis-ntw
sudo docker run --net redis-ntw -d --name redis -p 7000:7000 redis

sudo docker inspect redis-ntw
"IPv4Address": "172.20.0.2/16",   172.20.0.2

docker exec -it c95b82fd46a2f46168d34d9ce15c574adff59a4f0569ad0e68c1527d33f0b2a6 redis-cli


---------------------------------------------------------------------------------------------------------

mysql

sudo docker pull mysql/mysql-server:latest
sudo docker images
sudo docker run --name=mysql -d mysql/mysql-server:latest

sudo apt-get install mysql-client
sudo docker logs mysql

mI5bL4O&yAT6e*::&re8:a?R0573WhL?

sudo docker exec -it mysql bash
mysql -uroot -p
ALTER USER 'root'@'localhost' IDENTIFIED BY '12345';
sudo nano /root/docker/mysql/conf.d/mysql-custom.cnf (optional)

docker run --detach --name=mysql --env="MYSQL_ROOT_PASSWORD=[12345]" --publish 6603:3306 --volume=/root/docker/[mysql]/conf.d:/etc/mysql/conf.d

sudo mkdir -p /root/docker/mysql/conf.d
sudo nano /root/docker/mysql/conf.d/mysql-custom.cnf

mysql -uroot -p12345 -h127.0.0.1 -P6603 -e 'show global variables like "max_connections"';



docker run -p 13306:3306 --name mysql -eMYSQL_ROOT_PASSWORD=12345 -d mysql:8.0.32

mysql --host=127.0.0.1 --port=13306 -u root -p

docker inspect mysqlcontainerid --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'

mysql --host=127.0.0.1 --port=13306 -u root -p

url: jdbc:mysql://mysql-8.0.32:3306/orderDevDb?createDatabaseIfNotExist=true&autoReconnect=true&useSSL=false
username: user
password: 12345
==================================================================================
https://www.atlantic.net/dedicated-server-hosting/how-to-install-redis-server-using-docker-container/
sudo docker pull redis:5.0.0
sudo docker run -it --name redis -d redis:5.0.0
sudo docker logs redis
sudo docker exec -it redis bash
redis-cli
==================================================================================
https://www.dltlabs.com/blog/how-to-setup-configure-a-redis-cluster-easily-573120
==================================================================================
sudo docker ps | grep redis
sudo docker run -v /7000/redis.conf:/usr/local/etc/redis/redis.conf -d --net=host --name redis-7000 redis:5.0.0 redis-server /usr/local/etc/redis/redis.conf
sudo docker run -v /7001/redis.conf:/usr/local/etc/redis/redis.conf -d --net=host --name redis-7001 redis:5.0.0 redis-server /usr/local/etc/redis/redis.conf
sudo docker run -v /7002/redis.conf:/usr/local/etc/redis/redis.conf -d --net=host --name redis-7002 redis:5.0.0 redis-server /usr/local/etc/redis/redis.conf
sudo docker run -v /7003/redis.conf:/usr/local/etc/redis/redis.conf -d --net=host --name redis-7003 redis:5.0.0 redis-server /usr/local/etc/redis/redis.conf
sudo docker run -v /7004/redis.conf:/usr/local/etc/redis/redis.conf -d --net=host --name redis-7004 redis:5.0.0 redis-server /usr/local/etc/redis/redis.conf

sudo docker exec -it  f6f9b864e5a0 sh

# sudo docker run -it --name redis-7000 -d redis:5.0.0
redis-cli --cluster create 127.0.0.1:7000 --cluster-replicas 1

sudo docker run -v /7000:/redis --name redis-7000 -p 7000:7000 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf


redis-cli --cluster create 127.0.0.1:7000 127.0.0.1:7001 127.0.0.1:7002 127.0.0.1:7003 127.0.0.1:7004 --cluster-replicas 1

sudo docker run -v /7000/redis.conf:/usr/local/etc/redis/redis.conf -d --net=127.0.0.1 --name redis-7000 redis:5.0.0 redis-server /usr/local/etc/redis/redis.conf
----------------------------------------------
sudo docker network create redis-cluster
sudo docker network ls
-------------------    --------------------------- docker container run -d fe02cc6a101c



sudo docker run -d -v /7000:/redis --name redis-7000 -p 7000:7000 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf
sudo docker run -d -v /7001:/redis --name redis-7001 -p 7001:7001 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf
sudo docker run -d -v /7002:/redis --name redis-7002 -p 7002:7002 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf
sudo docker run -d -v /7003:/redis --name redis-7003 -p 7003:7003 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf
sudo docker run -d -v /7004:/redis --name redis-7004 -p 7004:7004 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf
sudo docker run -d -v /7005:/redis --name redis-7005 -p 7005:7005 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf


sudo docker run -d  redislabs/redisinsight:latest
----------------------------------------------
then if exit then run  sudo docker start redis-7000 f6f9b864e5a0
sudo docker exec -it redis-7000 bash
redis-cli -p 7000
sudo docker run -v /7001:/redis --name redis-7001 -p 7001:7001 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf

sudo docker inspect efc0f839b9f6 --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'
192.168.128.2
192.168.128.3
sudo docker exec -it docker-redis-7000-1 bash
redis-cli --cluster create 192.168.128.2:7000 192.168.128.3:7001 --cluster-replicas 1

# sudo docker run -v /redisinsight:/db -p 8001:8001 --network redis-cluster redislabs/redis-insight

redis-cli -h 172.19.0.3 -p 7000
SET lalala lilili
sudo docker exec -it docker-redis-7000-1 bash

docker compose up
docker compose down
docker ps -a
docker image ls

sudo docker run -v docker/7000:/redis --name node-1 -p 7000:7000 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf
sudo docker run -v docker/7001:/redis --name node-2 -p 7001:7001 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf
sudo docker run -v docker/7002:/redis --name node-3 -p 7002:7002 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf
sudo docker run -v docker/7003:/redis --name node-4 -p 7003:7003 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf
sudo docker run -v docker/7004:/redis --name node-5 -p 7004:7004 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf
sudo docker run -v docker/7005:/redis --name node-6 -p 7005:7005 --network redis-cluster redis:5.0.0 redis-server /redis/redis.conf

sudo docker exec -it redis-7000 bash

docker-redis-node-1-1
7000
localhost-redis-cluster
 sudo docker inspect docker_redis-cluster-compose

redis-docker-redis-node-1-1:7000

ip addr
sudo ip addr del 192.168.160.1/20 dev br-db6a728af972
sudo lsof -i -P -n | grep 7001

curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update
sudo apt-get install jenkins
dev 123456 jenkins cred
sudo systemctl start jenkins.service
sudo systemctl status jenkins
sudo ufw status
sudo cat /var/lib/jenkins/secrets/initialAdminPassword
yogeshch147@gmail.com  dockerhub@123

https://linuxconfig.org/how-to-install-kubernetes-on-ubuntu-22-04-jammy-jellyfish-linux
https://www.linuxtechi.com/how-to-install-minikube-on-ubuntu/

minikube dashboard
2009  minikube dashboard
 2010  docker image ls
 2011  docker run gcr.io/k8s-minikube/kicbase
 2012  docker run gcr.io/k8s-minikube/kicbase:v0.0.40
 2013  sudo docker run gcr.io/k8s-minikube/kicbase
 2014  sudo docker run gcr.io/k8s-minikube/kicbase:v0.0.40
 2015  docker ps
 2016  docker ps -a
 2017  docker rm f432e9f7c49e 3e07ae0cf7f2
 2018  docker ps -a
 2019  docker run 0491b5511633
 2020  minikube dashboard
 2021  minikube start
 2022  sudo service cri-docker.socket restart
 2023  docker ps -a
 2024  docker run minikube
 2025  docker container start --attach -i minikube
 2026  docker container start - minikube
 2027  docker container start  minikube
 2028  docker ps -a
 2029  kubectl get nodes
 2030  docker stop minikube
 2031  docker rm  minikube
 2032  docker ps -a
 2033  minikube start --driver=docker
 2034  minikube addons enable metrics-server
 2035  minikube start --addons=ingress --cpus=2 --cni=flannel --install-addons=true --kubernetes-version=stable --memory=6g
 2036  minikube status
 2037  kubectl cluster-info
 2038  minikube addons enable logviewer
 2039  kubectl cluster-info
 2040  minikube addons list
 2041  minikube dashboard
 2042  minikube --help

kubectl delete pod nginx


--------------------------------------------------------------------------------------------------------------------------
To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 192.168.43.206:6443 --token jhr565.mqvo00xdvu0eos4m \
	--discovery-token-ca-cert-hash sha256:6edc86d22ed6cc58554cb8eedd138c14c007e6648fac5b8e463b7d09ce423f6a

-----------------------------------------------------------------------------------------------------------------------

	 1994  sudo hostnamectl set-hostname kubernetes-master
     1995  kubectl apply -f api-gateway-deployment.yaml
     1996  kubectl apply -f api-gateway-service.yaml
     1997  kubectl apply -f eureka-deployment.yaml
     1998  kubectl apply -f eureka-service.yaml
     1999  kubectl apply -f redis-cluster-compose-networkpolicy.yaml
     2000  kubectl apply -f redis-cluster-compose-networkpolic.yaml
     2001  kubectl apply -f redis-cluster-compose-networkpolicy.yaml
     2002  sudo kubectl apply -f redis-cluster-compose-networkpolicy.yaml
     2003  clear
     2004  sudo kubectl apply -f redis-cluster-compose-networkpolicy.yaml
     2005  clear
     2006  kubectl apply -f redis-cluster-compose-networkpolicy.yaml
     2007  kubectl get pods --all-namespaces
     2008  kubectl apply -f redis-cluster-compose
     2009  kubectl get crds
     2010  kubectl get redis-cluster-compose  -A
     2011  kubectl get redis-cluster-compose-networkpolicy  -A
     2012  get crds
     2013  kubectl get crds
     2014  kubectl apply -f custom-crd.yaml
     2015  kubectl apply -f redis-cluster-compose-networkpolicy.yaml
     2016  kubectl get crds
     2017  kubectl apply -f redis-cluster-compose-networkpolicy.yaml
     2018  kubectl get pods
     2019  kubectl get deployments
     2020  kubectl get services
     2021  kubectl get deployment
     2022  kubectl describe deployment  api-gateway-
     2023  kubectl describe deployment  api-gateway
     2024  kubectl describe deployment eureka
     2025  kubectl get pods
     2026  kubectl get services
     2027  kubectl get deployments
     2028  kubectl apply -f redis-cluster-compose-networkpolicy.yaml
     2029  sudo kubectl apply -f eureka-deployment.yaml
     2030  kubectl apply -f eureka-deployment.yaml
     2031  kubectl apply -f eureka-servicer.yaml
     2032  kubectl apply -f eureka-service.yaml
     2033  kubectl apply -f api-gateway-deployment.yaml
     2034  kubectl apply -f api-gateway-service.yaml
     2035  docker login
     2036  kubectl apply -f api-gateway-deployment.yaml
     2037  kubectl apply -f api-gateway-service.yaml
     2038  docker image ls
     2039  kubectl apply -f api-gateway-deployment.yaml
     2040  kubectl apply -f api-gateway-service.yaml
     2041  kubectl get deployments
     2042  kubectl apply -f eureka-deployment.yaml
     2043  kubectl apply -f eureka-service.yaml
     2044  kubectl apply -f eureka-deployment.yaml
     2045  kubectl apply -f eureka-service.yaml
     2046  kubectl get deployments
     2047  kubectl cluster-info
     2048  kubectl get svc
     2049  kubectl get pod
     2050  kubectl get pods
     2051  kubectl logs api-gateway-97549d848-wsz74
     2052  kubectl get pods
     2053  kubectl logs api-gateway-97549d848-wsz74
     2054  kubectl get svc
     2055  kubectl get pods
     2056  kubectl logs eureka-746786d597-gxkhz
     2057  kubectl get svc
     2058  kubectl logs api-gateway-97549d848-wsz74
     2059  kubectl get svc
     2060  kubectl get pods
     2061  kubectl logs api-gateway-bbb77496c-6ltl8
     2062  kubectl get svc
     2063  minikube ip
     2064  kubectl get pods
     2065  kubectl get svc
     2066  kubectl apply -f eureka-deployment.yaml
     2067  kubectl apply -f eureka-service.yaml
     2068  kubectl get svc
     2069  kubectl get pods
     2070  kubectl logs eureka-5ccf5b6d9f-n58rh
     2071  kubectl get pods
     2072  kubectl get svc
     2073  minikube ip
     2074  kubectl get pods
     2075  kubectl logs api-gateway-544f6d5b79-8l6fd
     2076  ls
-----------------------------------------------------------------------------------------------------------------------